<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>MerlinFeng Blog</title>
    <description>test mysql php nginx apache ....</description>
    <link>http://www.onwise.xyz/</link>
    <atom:link href="http://www.onwise.xyz/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Mon, 19 Sep 2016 09:47:00 +0800</pubDate>
    <lastBuildDate>Mon, 19 Sep 2016 09:47:00 +0800</lastBuildDate>
    <generator>Jekyll v3.2.1</generator>
    
      <item>
        <title>PHP底层实现</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;“PHP底层实现”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;​&lt;/p&gt;

&lt;p&gt;2、 请在local环境，编译PHP，要求：版本5.4, 5.5, 5.6，每个版本要涵盖3个编译版本，包括nts \ zts \ debug
   /usr/lib/apache2/modules&lt;/p&gt;

&lt;p&gt;/etc/apache2/mods-enabled/
   vim php5.load&lt;/p&gt;

&lt;p&gt;.编译php的ztf，ntf，debug模式
       a.安装apsx工具   apt-get install apache-dev
       b.在php源码包下运行 ./configure  –prefix=/home/merlin/make_php_version/php-5.4-zts-debug/   –enable-maintainer-zts  –with-apxs2=/usr/bin/apxs2   –enable-debug
       c.make&amp;amp;&amp;amp;make install  在/usrb/apache2/modules下生成libphp5.so文件
       d.在/etc/apache2/mods-enabled下php5.load中添加模块文件.so&lt;/p&gt;

&lt;p&gt;编译报错 解决 undefined reference to `libiconv_open’&lt;/p&gt;

&lt;p&gt;配置文件：
   在安装包中找到php.ini.development 拷贝到安装后的目录下的lib里
   每次执行该版本的php 要指定目录
   例如：/home/merlin/php_version/php-5.5.21-zts-debug/bin/php -i|grep php.ini&lt;/p&gt;

&lt;p&gt;解决方法：
   #wget http://ftp.gnu.org/pub/gnu/libiconv/libiconv-1.13.1.tar.gz
   #tar -zxvf libiconv-1.13.1.tar.gz
   #cd libiconv-1.13.1
   # ./configure –prefix=/usr/local/libiconv
   # make
   # make install&lt;/p&gt;

&lt;p&gt;再检查php，指定 iconv的位置  –with-iconv=/usr/local/libiconv&lt;/p&gt;

&lt;p&gt;3、 编写一个简单的PHP扩展，实现3个PHP方法，分别接收参数，并完成结果输出：
       a. 数字a与数字b的，加、减、乘、除
       b. 字符串a，在字符串b中的重复次数
       c. 数组a与数组b的交集与差集&lt;/p&gt;

&lt;p&gt;参考 http://www.laruence.com/2009/04/28/719.html&lt;/p&gt;

&lt;p&gt;源码包执行
   ./ext_skel –extname=myfunctions –proto=myfunctions.def&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;         make clean &amp;amp;&amp;amp; make &amp;amp;&amp;amp; make install
       /etc/php5   操作ini 以及移动so文件
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;类型指定符	对应的C类型	描述
   l	long	符号整数
   d	double	浮点数
   s	char *, int	二进制字符串，长度
   b	zend_bool	逻辑型（1或0）
   r	zval *	资源（文件指针，数据库连接等）
   a	zval *	联合数组
   o	zval *	任何类型的对象
   O	zval *	指定类型的对象。需要提供目标对象的类类型
   z	zval *	无任何操作的zval
   if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, “sdd”,&amp;amp;str,&amp;amp;str_len,&amp;amp;a,&amp;amp;b) == FAILURE){
       return;
     }&lt;/p&gt;

&lt;p&gt;设置返回值并且结束函数	设置返回值	宏返回类型和参数
   RETURN_LONG(l)	RETVAL_LONG(l)	整数
   RETURN_BOOL(b)	RETVAL_BOOL(b)	布尔数(1或0)
   RETURN_NULL()	RETVAL_NULL()	NULL
   RETURN_DOUBLE(d)	RETVAL_DOUBLE(d)	浮点数
   RETURN_STRING(s, dup)	RETVAL_STRING(s, dup)	字符串。如果dup为1，引擎会调用estrdup()重复s，使用拷贝。如果dup为0，就使用s
   RETURN_STRINGL(s, l, dup)	RETVAL_STRINGL(s, l, dup)	长度为l的字符串值。与上一个宏一样，但因为s的长度被指定，所以速度更快。
   RETURN_TRUE	RETVAL_TRUE	返回布尔值true。注意到这个宏没有括号。
   RETURN_FALSE	RETVAL_FALSE	返回布尔值false。注意到这个宏没有括号。
   RETURN_RESOURCE(r)	RETVAL_RESOURCE(r)	资源句柄。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;         php -i | grep php.ini    1、 请具体叙述PHP的运行机制（细到多深看你心情, 呵）；    PHP从下到上是一个4层体系：
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Zend引擎：Zend整体用纯C实现，是PHP的内核部分，它将PHP代码翻译（词法、语法解析等一系列编译过程）为可执行opcode的处理并实现相应的处理方法、实现了基本的数据结构（如hashtable、oo）、内存分配及管理、提供了相应的api方法供外部调用，是一切的核心，所有的外围功能均围绕Zend实现。
   Extensions：围绕着Zend引擎，extensions通过组件式的方式提供各种基础服务，我们常见的各种内置函数（如array系列）、标准库等都是通过extension来实现，用户也可以根据需要实现自己的extension以达到功能扩展、性能优化等目的（如贴吧正在使用的PHP中间层、富文本解析就是extension的典型应用）。
   Sapi：Sapi全称是Server Application Programming Interface，也就是服务端应用编程接口，Sapi通过一系列钩子函数，使得PHP可以和外围交互数据，这是PHP非常优雅和成功的一个设计，通过sapi成功的将PHP本身和上层应用解耦隔离，PHP可以不再考虑如何针对不同应用进行兼容，而应用本身也可以针对自己的特点实现不同的处理方式。
   上层应用：这就是我们平时编写的PHP程序，通过不同的sapi方式得到各种各样的应用模式，如通过webserver实现web应用、在命令行下以脚本方式运行等等。&lt;/p&gt;
</description>
        <pubDate>Mon, 11 Jul 2016 00:00:00 +0800</pubDate>
        <link>http://www.onwise.xyz/2016/07/11/PHP%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0/</link>
        <guid isPermaLink="true">http://www.onwise.xyz/2016/07/11/PHP%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0/</guid>
        
        <category>PHP</category>
        
        
      </item>
    
      <item>
        <title>ubuntu搭建LAMP</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;“第一篇github.io 试水之作”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;首先一条命令：apt-get install apache2 mysql-server mysql-client php5 php5-gd php5-mysql&lt;/p&gt;

&lt;p&gt;设置Ubuntu文件执行读写权限&lt;/p&gt;

&lt;p&gt;LAMP 组建安装好之后，PHP网络服务器根目录默认设置是在：/var/www。由于Linux系统的安全性原则，改 目录下的文件读写权限是只允许root用户操作的，所以我们不能在www文件夹中新建php文件，也不能修改和删除，必须要先修改/var/www目录的 读写权限。在界面管理器中通过右键属性不能修改文件权限，得执行root终端命令：sudo chmod 777 /var/www。然后就可以写入html或php文件了。如果对777表示的文件权限不是很清楚，可以到这篇文章中看看：文件权限666是什么意思。&lt;/p&gt;

&lt;p&gt;如何安装phpmyadmin-Mysql 数据库管理
命令：sudo apt-get install phpmyadmin 安装开始。&lt;/p&gt;

&lt;p&gt;phpmyadmin设置：&lt;/p&gt;

&lt;p&gt;在 安装过程中会要求选择Web server：apache2或lighttpd，选择apache2，按tab键然后确定。然后会要求输入设置的Mysql数据库密码连接密码 Password of the database’s administrative user。&lt;/p&gt;

&lt;p&gt;然后将phpmyadmin与 apache2建立连接，以我的为例：www目录在/var/www，phpmyadmin在/usr/share/phpmyadmin目录，所以就用 命令：sudo ln -s /usr/share/phpmyadmin /var/www 建立连接。&lt;/p&gt;

&lt;p&gt;phpmyadmin测试：在浏览器地址栏中打开http://localhost/phpmyadmin。&lt;/p&gt;

&lt;p&gt;Ubuntu LAMP 如何配置Apache&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;启用 mod_rewrite 模块&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;终端命令：sudo a2enmod rewrite&lt;/p&gt;

&lt;p&gt;重启Apache服务器：sudo /etc/init.d/apache2 restart&lt;/p&gt;

&lt;p&gt;Apache 重启后我们可以测试一下，在/var/www目录下新建文件test.php，写入代码：   保存，在地址栏输入http://127.0.0.1/test.php 或 http://localhost/test.php ，如果正确出现了php 配置信息则表明LAMP Apache已经正常工作了(记得重启Apache服务器后再测试)。&lt;/p&gt;

&lt;p&gt;2.设置Apache支持.htm .html .php&lt;/p&gt;

&lt;p&gt;sudo gedit /etc/apache2/apache2.conf&lt;/p&gt;

&lt;p&gt;或sudo gedit /etc/apache2/mods-enabled/php5.conf&lt;/p&gt;

&lt;p&gt;在打开的文件中加上&lt;/p&gt;

&lt;p&gt;AddType application/x-httpd-php .php .htm .html 即可。&lt;/p&gt;

&lt;p&gt;LAMP配置之Mysql测试&lt;/p&gt;

&lt;p&gt;上面php,Apache 都已经测试过了，下面我们再测试一下Mysql 数据库是否已经正确启用。&lt;/p&gt;

&lt;p&gt;在/var/www目录下新建 mysql_test.php：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$link = mysql_connect(&quot;localhost&quot;,&quot;root&quot;,&quot;020511&quot;);

if (!$link)

{

die('Could not connect: ' . mysql_error());

}

else echo &quot;Mysql已经正确配置&quot;;

mysql_close($link);

?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;保存退出，在地址栏输入http://127.0.0.1/mysql_test.php，显示”Mysql 已经正确配置”则表示OK了，如果不行，重启Apache服务器后再试一下。&lt;/p&gt;

&lt;p&gt;解决Firefox浏览器显示中文乱码等问题&lt;/p&gt;

&lt;p&gt;上面在FireFox浏览器中打开mysql_test.php或phpmyadmin测试时，如果出现了中文乱码，则是默认语言设置问题，解决方法如下：&lt;/p&gt;

&lt;p&gt;打开apache配置文件： udo gedit /etc/apache2/apache2.conf，在最后面加上：AddDefaultCharset UTF-8，如果还是乱码的，再将UTF-8改用gb2312。&lt;/p&gt;

&lt;p&gt;重启Apache：sudo /etc/init.d/apache2 restart  再刷新mysql_test.php 中文乱码没有了。&lt;/p&gt;

&lt;p&gt;如果要人工启动mysql：mysql -u root -p，根据提示输入密码。&lt;/p&gt;

&lt;p&gt;如果重启Apache时出现：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Restarting web server apache2&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;apache2: Could not reliably determine the server’s fully qualified domain name, using 127.0.1.1 for ServerName&lt;/p&gt;

&lt;p&gt;apache2: Could not reliably determine the server’s fully qualified domain name, using 127.0.1.1 for ServerName&lt;/p&gt;

&lt;p&gt;则还是修改apache配置文件：sudo gedit /etc/apache2/apache2.conf，在文件最后设置：ServerName 127.0.0.1&lt;/p&gt;

&lt;p&gt;LAMP组件经常使用的几个终端命令&lt;/p&gt;

&lt;p&gt;重启 apache：sudo /etc/init.d/apache2 restart&lt;/p&gt;

&lt;p&gt;重启mysql：sudo /etc/init.d/mysql restart&lt;/p&gt;

&lt;p&gt;配置 php.ini：sudo gedit /etc/php5/apache2/php.ini&lt;/p&gt;

&lt;p&gt;配置 apache2.conf：sudo gedit /etc/apache2/apache2.conf&lt;/p&gt;

&lt;p&gt;配置 my.cnf：sudo gedit /etc/mysql/my.cnf&lt;/p&gt;

&lt;p&gt;PHP CGI ：sudo /var/www/cgi-bin/&lt;/p&gt;

</description>
        <pubDate>Tue, 05 Jul 2016 00:00:00 +0800</pubDate>
        <link>http://www.onwise.xyz/2016/07/05/ubuntu%E6%90%AD%E5%BB%BAlamp/</link>
        <guid isPermaLink="true">http://www.onwise.xyz/2016/07/05/ubuntu%E6%90%AD%E5%BB%BAlamp/</guid>
        
        <category>LAMP</category>
        
        <category>服务器</category>
        
        
      </item>
    
      <item>
        <title>ubuntu搭建Django</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;“Django”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;最近看到python web 比较流行的django框架，所以研究下 搭个环境
磁盘初始化
1更新源：
sudo apt-get update&lt;/p&gt;

&lt;p&gt;2装Apache、wsgi、Django、MySQL、MySQLdb&lt;/p&gt;

&lt;p&gt;sudo apt-get install apache2 libapache2-mod-wsgi python-django mysql-server mysql-client python-mysqldb&lt;/p&gt;

&lt;p&gt;中途需要输入数据库密码&lt;/p&gt;

&lt;p&gt;3设置apache文件夹权限
cd /etc/apache2
vim apache2.conf
找到并更改：&lt;/p&gt;
&lt;Directory /&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    Options FollowSymLinks
    AllowOverride None
    #Require all denied
    Allow from all
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&amp;lt;/Directory&amp;gt;&lt;/p&gt;

&lt;p&gt;4建立Django工程目录,并创建第一个django工程
mkdir /home/django
cd /home/django
django-admin startproject blog
执行完毕后会出现blog文件夹，并且里面有一些python文件&lt;/p&gt;

&lt;p&gt;5建立wsgi
cd /etc/apache2
mkdir django
cd django
vim django.wsgi
填入下面内容：
import os
import sys
path = ‘/home/django/blog’
if path not in sys.path:
    sys.path.insert(0, ‘/home/django/blog’)
os.environ[‘DJANGO_SETTINGS_MODULE’] = ‘blog.settings’
import django.core.handlers.wsgi
application = django.core.handlers.wsgi.WSGIHandler()&lt;/p&gt;

&lt;p&gt;cd /etc/apache2/sites-available
vim blog.conf&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;VirtualHost *:80&amp;gt;
    #ServerName hello.djangoserver
    DocumentRoot /home/django/blog
    &amp;lt;Directory /home/django/blog&amp;gt;  
        Order allow,deny
        Allow from all
    &amp;lt;/Directory&amp;gt;
    WSGIDaemonProcess mydjangosite processes=2 threads=15 display-name=%{GROUP}
    WSGIProcessGroup mydjangosite
    WSGIScriptAlias / /etc/apache2/django/django.wsgi
&amp;lt;/VirtualHost&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;6启用
sudo a2dissite 000-default
sudo a2ensite blog.conf
sudo service apache2 reload&lt;/p&gt;

&lt;p&gt;访问本机IP，如果出现Congratulations on your first Django-powered page.字样，代表配置完成
python manage.py runserver&lt;/p&gt;
</description>
        <pubDate>Tue, 05 Jul 2016 00:00:00 +0800</pubDate>
        <link>http://www.onwise.xyz/2016/07/05/python_dgaigo/</link>
        <guid isPermaLink="true">http://www.onwise.xyz/2016/07/05/python_dgaigo/</guid>
        
        <category>服务器</category>
        
        
      </item>
    
      <item>
        <title>MySQL索引介绍与优化</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;“MySQL索引介绍与优化”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;索引是快速搜索的关键。MySQL索引的建立对于MySQL的高效运行是很重要的。下面介绍几种常见的MySQL索引类型。&lt;/p&gt;

&lt;p&gt;在数据库表中，对字段建立索引可以大大提高查询速度。假如我们创建了一个 mytable表：&lt;/p&gt;

&lt;p&gt;CREATE TABLE mytable(   ID INT NOT NULL,    username VARCHAR(16) NOT NULL  );   我们随机向里面插入了10000条记录，其中有一条：5555, admin。&lt;/p&gt;

&lt;p&gt;在查找username=”admin”的记录 SELECT * FROM mytable WHERE username=’admin’;时，如果在username上已经建立了索引，MySQL无须任何扫描，即准确可找到该记录。相反，MySQL会扫描所有记录，即要查询10000条记录。&lt;/p&gt;

&lt;p&gt;索引分单列索引和组合索引。单列索引，即一个索引只包含单个列，一个表可以有多个单列索引，但这不是组合索引。组合索引，即一个索包含多个列。&lt;/p&gt;

&lt;p&gt;MySQL索引类型包括：&lt;/p&gt;

&lt;p&gt;（1）普通索引&lt;/p&gt;

&lt;p&gt;这是最基本的索引，它没有任何限制。它有以下几种创建方式：&lt;/p&gt;

&lt;p&gt;◆创建索引&lt;/p&gt;

&lt;p&gt;CREATE INDEX indexName ON mytable(username(length)); 如果是CHAR，VARCHAR类型，length可以小于字段实际长度；如果是BLOB和TEXT类型，必须指定 length，下同。&lt;/p&gt;

&lt;p&gt;◆修改表结构&lt;/p&gt;

&lt;p&gt;ALTER mytable ADD INDEX [indexName] ON (username(length)) ◆创建表的时候直接指定&lt;/p&gt;

&lt;p&gt;CREATE TABLE mytable(   ID INT NOT NULL,    username VARCHAR(16) NOT NULL,   INDEX [indexName] (username(length))   );  删除索引的语法：&lt;/p&gt;

&lt;p&gt;DROP INDEX [indexName] ON mytable;&lt;/p&gt;

&lt;p&gt;（2）唯一索引&lt;/p&gt;

&lt;p&gt;它与前面的普通索引类似，不同的就是：索引列的值必须唯一，但允许有空值。如果是组合索引，则列值的组合必须唯一。它有以下几种创建方式：&lt;/p&gt;

&lt;p&gt;◆创建索引&lt;/p&gt;

&lt;p&gt;CREATE UNIQUE INDEX indexName ON mytable(username(length)) ◆修改表结构&lt;/p&gt;

&lt;p&gt;ALTER mytable ADD UNIQUE [indexName] ON (username(length)) ◆创建表的时候直接指定&lt;/p&gt;

&lt;p&gt;CREATE TABLE mytable(   ID INT NOT NULL,    username VARCHAR(16) NOT NULL,   UNIQUE [indexName] (username(length))   );&lt;/p&gt;

&lt;p&gt;（3）主键索引&lt;/p&gt;

&lt;p&gt;它是一种特殊的唯一索引，不允许有空值。一般是在建表的时候同时创建主键索引：&lt;/p&gt;

&lt;p&gt;CREATE TABLE mytable(   ID INT NOT NULL,    username VARCHAR(16) NOT NULL,   PRIMARY KEY(ID)   );  当然也可以用 ALTER 命令。记住：一个表只能有一个主键。&lt;/p&gt;

&lt;p&gt;（4）组合索引&lt;/p&gt;

&lt;p&gt;为了形象地对比单列索引和组合索引，为表添加多个字段：&lt;/p&gt;

&lt;p&gt;CREATE TABLE mytable(   ID INT NOT NULL,    username VARCHAR(16) NOT NULL,   city VARCHAR(50) NOT NULL,   age INT NOT NULL  );  为了进一步榨取MySQL的效率，就要考虑建立组合索引。就是将 name, city, age建到一个索引里：&lt;/p&gt;

&lt;p&gt;ALTER TABLE mytable ADD INDEX name_city_age (name(10),city,age); 建表时，usernname长度为 16，这里用 10。这是因为一般情况下名字的长度不会超过10，这样会加速索引查询速度，还会减少索引文件的大小，提高INSERT的更新速度。&lt;/p&gt;

&lt;p&gt;如果分别在 usernname，city，age上建立单列索引，让该表有3个单列索引，查询时和上述的组合索引效率也会大不一样，远远低于我们的组合索引。虽然此时有了三个索引，但MySQL只能用到其中的那个它认为似乎是最有效率的单列索引。&lt;/p&gt;

&lt;p&gt;建立这样的组合索引，其实是相当于分别建立了下面三组组合索引：&lt;/p&gt;

&lt;p&gt;usernname,city,age   usernname,city   usernname  为什么没有 city，age这样的组合索引呢？这是因为MySQL组合索引“最左前缀”的结果。简单的理解就是只从最左面的开始组合。并不是只要包含这三列的查询都会用到该组合索引，下面的几个SQL就会用到这个组合索引：&lt;/p&gt;

&lt;p&gt;SELECT * FROM mytable WHREE username=”admin” AND city=”郑州”  SELECT * FROM mytable WHREE username=”admin” 而下面几个则不会用到：&lt;/p&gt;

&lt;p&gt;SELECT * FROM mytable WHREE age=20 AND city=”郑州”  SELECT * FROM mytable WHREE city=”郑州”&lt;/p&gt;

&lt;p&gt;（5）建立索引的时机&lt;/p&gt;

&lt;p&gt;到这里我们已经学会了建立索引，那么我们需要在什么情况下建立索引呢？一般来说，在WHERE和JOIN中出现的列需要建立索引，但也不完全如此，因为MySQL只对&amp;lt;，&amp;lt;=，=，&amp;gt;，&amp;gt;=，BETWEEN，IN，以及某些时候的LIKE才会使用索引。例如：&lt;/p&gt;

&lt;p&gt;SELECT t.Name  FROM mytable t LEFT JOIN mytable m    ON t.Name=m.username WHERE m.age=20 AND m.city=’郑州’ 此时就需要对city和age建立索引，由于mytable表的userame也出现在了JOIN子句中，也有对它建立索引的必要。&lt;/p&gt;

&lt;p&gt;刚才提到只有某些时候的LIKE才需建立索引。因为在以通配符%和_开头作查询时，MySQL不会使用索引。例如下句会使用索引：&lt;/p&gt;

&lt;p&gt;SELECT * FROM mytable WHERE username like’admin%’ 而下句就不会使用：&lt;/p&gt;

&lt;p&gt;SELECT * FROM mytable WHEREt Name like’%admin’ 因此，在使用LIKE时应注意以上的区别。&lt;/p&gt;

&lt;p&gt;（6）索引的不足之处&lt;/p&gt;

&lt;p&gt;上面都在说使用索引的好处，但过多的使用索引将会造成滥用。因此索引也会有它的缺点：&lt;/p&gt;

&lt;p&gt;◆虽然索引大大提高了查询速度，同时却会降低更新表的速度，如对表进行INSERT、UPDATE和DELETE。因为更新表时，MySQL不仅要保存数据，还要保存一下索引文件。&lt;/p&gt;

&lt;p&gt;◆建立索引会占用磁盘空间的索引文件。一般情况这个问题不太严重，但如果你在一个大表上创建了多种组合索引，索引文件的会膨胀很快。&lt;/p&gt;

&lt;p&gt;索引只是提高效率的一个因素，如果你的MySQL有大数据量的表，就需要花时间研究建立最优秀的索引，或优化查询语句。&lt;/p&gt;

&lt;p&gt;（7）使用索引的注意事项&lt;/p&gt;

&lt;p&gt;使用索引时，有以下一些技巧和注意事项：&lt;/p&gt;

&lt;p&gt;◆索引不会包含有NULL值的列&lt;/p&gt;

&lt;p&gt;只要列中包含有NULL值都将不会被包含在索引中，复合索引中只要有一列含有NULL值，那么这一列对于此复合索引就是无效的。所以我们在数据库设计时不要让字段的默认值为NULL。&lt;/p&gt;

&lt;p&gt;◆使用短索引&lt;/p&gt;

&lt;p&gt;对串列进行索引，如果可能应该指定一个前缀长度。例如，如果有一个CHAR(255)的列，如果在前10个或20个字符内，多数值是惟一的，那么就不要对整个列进行索引。短索引不仅可以提高查询速度而且可以节省磁盘空间和I/O操作。&lt;/p&gt;

&lt;p&gt;◆索引列排序&lt;/p&gt;

&lt;p&gt;MySQL查询只使用一个索引，因此如果where子句中已经使用了索引的话，那么order by中的列是不会使用索引的。因此数据库默认排序可以符合要求的情况下不要使用排序操作；尽量不要包含多个列的排序，如果需要最好给这些列创建复合索引。&lt;/p&gt;

&lt;p&gt;◆like语句操作&lt;/p&gt;

&lt;p&gt;一般情况下不鼓励使用like操作，如果非使用不可，如何使用也是一个问题。like “%aaa%” 不会使用索引而like “aaa%”可以使用索引。&lt;/p&gt;

&lt;p&gt;◆不要在列上进行运算&lt;/p&gt;

&lt;p&gt;select * from users where YEAR(adddate)&amp;lt;2007; 将在每个行上进行运算，这将导致索引失效而进行全表扫描，因此我们可以改成&lt;/p&gt;

&lt;p&gt;select * from users where adddate&amp;lt;‘2007-01-01’;&lt;/p&gt;

&lt;p&gt;◆不使用NOT IN和&amp;lt;&amp;gt;操作&lt;/p&gt;
</description>
        <pubDate>Tue, 05 Jul 2016 00:00:00 +0800</pubDate>
        <link>http://www.onwise.xyz/2016/07/05/mysql-%E7%B4%A2%E5%BC%95/</link>
        <guid isPermaLink="true">http://www.onwise.xyz/2016/07/05/mysql-%E7%B4%A2%E5%BC%95/</guid>
        
        <category>MySQL</category>
        
        
      </item>
    
      <item>
        <title>PHP内存溢出</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;“PHP内存溢出”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;一．内存溢出解决方案&lt;/p&gt;

&lt;p&gt;在做数据统计分析时，经常会遇到大数组，可能会发生内存溢出，这里分享一下我的解决方案。还是用例子来说明这个问题，如下：&lt;/p&gt;

&lt;p&gt;假定日志中存放的记录数为500000条，那么解决方案如下：&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;   ini_set(‘memory_limit’,’64M’);　//重置php可以使用的内存大小为64M，一般在远程主机上是不能修改php.ini文件的，只能通过程序设置。注：在safe_mode（安全模式）下，ini_set失效

   set_time_limit(600);//设置超时限制为６分钟

   $farr = $Uarr = $Marr = $IParr = $data = $_sub = array();

   $spt = ”$@#!$”;

   $root = ”/Data/webapps/VisitLog”;

   $path = $dpath = $fpath = NULL;

   $path = $root.”/”.date(“Y-m”,$timestamp);

   $dpath = $path.”/”.date(“m-d”,$timestamp);

   for($j=0;$j&lt;span class=&quot;nt&quot;&gt;&amp;lt;24&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;$&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;++){&lt;/span&gt;

   &lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;v =&lt;/span&gt;&lt;span class=&quot;err&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;($j&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;”&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;″.$&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;

   &lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;gpath =&lt;/span&gt;&lt;span class=&quot;err&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;$dpath.”/”.$v.”.php”;&lt;/span&gt;

   &lt;span class=&quot;na&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;file_exists&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;($&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;gpath&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;)){&lt;/span&gt;

   &lt;span class=&quot;na&quot;&gt;continue&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;

   &lt;span class=&quot;err&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;

   &lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;arr =&lt;/span&gt;&lt;span class=&quot;err&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;file($gpath);////将文件读入数组中&lt;/span&gt;

   &lt;span class=&quot;na&quot;&gt;array_shift&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;($&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;);//移出第一个单元－》&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;exit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;?&amp;gt;&lt;/span&gt;

   &lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;farr =&lt;/span&gt;&lt;span class=&quot;err&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;array_merge($farr,$arr);&lt;/span&gt;

   &lt;span class=&quot;na&quot;&gt;unset&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;($&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;);&lt;/span&gt;

   &lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;

   &lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;

   &lt;span class=&quot;na&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;empty&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;($&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;this-&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;farr)){

   echo ”&lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&amp;lt;center&amp;gt;&lt;/span&gt;没有相关记录！&lt;span class=&quot;nt&quot;&gt;&amp;lt;/center&amp;gt;&amp;lt;/p&amp;gt;&lt;/span&gt;”;

   exit;

   }

   while(!empty($farr)){

   $_sub = array_splice($farr, 0, 10000); //每次取出$farr中1000个

   for($i=0,$scount=count($_sub);$i&lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt;$scount;$i++){

   $arr = explode($spt,$_sub[$i]);

   $Uarr[] = $arr[1]; //vurl

   $Marr[] = $arr[2]; //vmark

   $IParr[] = $arr[3].” |$nbsp;”.$arr[1]; //IP

   }

   unset($_sub);//用完及时销毁

   }

   unset($farr);

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;这里，不难看出，一方面，我们要增加PHP可用内存大小，另一方面，只要我们想办法对数组进行分批处理，分而治之，将用过的变量及时销毁(unset)，一般是不会出现溢出问题的。&lt;/p&gt;

&lt;p&gt;另外，为了节省PHP程序内存损耗，我们应当尽可能减少静态变量的使用，在需要数据重用时，可以考虑使用引用(&amp;amp;)。再一点就是：数据库操作完成后，要马上关闭连接；一个对象使用完，要及时调用析构函数（__destruct()）。&lt;/p&gt;

&lt;p&gt;二．unset销毁变量并释放内存问题&lt;/p&gt;

&lt;p&gt;PHP的unset()函数用来清除、销毁变量，不用的变量，我们可以用unset()将它销毁。但是某些时候，用unset()却无法达到销毁变 量占用的内存！我们先看一个例子：&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;   &lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
   &lt;span class=&quot;nv&quot;&gt;$s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;str_repeat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'1'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//产生由255个1组成的字符串
&lt;/span&gt;   &lt;span class=&quot;nv&quot;&gt;$m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;memory_get_usage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//获取当前占用内存
&lt;/span&gt;   &lt;span class=&quot;nb&quot;&gt;unset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
   &lt;span class=&quot;nv&quot;&gt;$mm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;memory_get_usage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//unset()后再查看当前占用内存
&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$mm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
   &lt;span class=&quot;cp&quot;&gt;?&amp;gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;最后输出unset()之前占用内存减去unset()之后占用内存，如果是正数，那么说明unset($s)已经将$s从内存中销毁(或者说，unset()之后内存占用减少了)，可是我在PHP5和windows平台下，得到的结果是：0。这是否可以说明，unset($s)并没有起 到销毁变量$s所占用内存的作用呢？我们再作下面的例子：&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;   &lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
   &lt;span class=&quot;nv&quot;&gt;$s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;str_repeat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'1'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;256&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//产生由256个1组成的字符串
&lt;/span&gt;   &lt;span class=&quot;nv&quot;&gt;$m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;memory_get_usage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//获取当前占用内存
&lt;/span&gt;   &lt;span class=&quot;nb&quot;&gt;unset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
   &lt;span class=&quot;nv&quot;&gt;$mm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;memory_get_usage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//unset()后再查看当前占用内存
&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$mm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
   &lt;span class=&quot;cp&quot;&gt;?&amp;gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;这个例子，和上面的例子几乎相同，唯一的不同是，$s由256个1组成，即比第一个例子多了一个1，得到结果是：272。这是否可以说 明，unset($s)已经将$s所占用的内存销毁了？
   通过上面两个例子，我们可以得出以下结论：
   结论一、unset()函数只能在变量值占用内存空间超过256字节时才会释放内存空间。&lt;/p&gt;

&lt;p&gt;那么是不是只要变量值超过256，使用unset就可以释放内存空间呢？我们再通过一个例子来测试一下：&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
   &lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
   &lt;span class=&quot;nv&quot;&gt;$s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;str_repeat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'1'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;256&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//这和第二个例子完全相同
&lt;/span&gt;   &lt;span class=&quot;nv&quot;&gt;$p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;amp;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
   &lt;span class=&quot;nv&quot;&gt;$m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;memory_get_usage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
   &lt;span class=&quot;nb&quot;&gt;unset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//销毁$s
&lt;/span&gt;   &lt;span class=&quot;nv&quot;&gt;$mm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;memory_get_usage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'&amp;lt;br /&amp;gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$mm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
   &lt;span class=&quot;cp&quot;&gt;?&amp;gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;刷新页面，我们看到第一行有256个1，第二行是0，按理说我们已经销毁了$s，而$p只是引用$s的变量，应该是没有内容了，另 外，unset($s)前后内存占用没变化！现在我们再做以下的例子：&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
   &lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
   &lt;span class=&quot;nv&quot;&gt;$s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;str_repeat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'1'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;256&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//这和第二个例子完全相同
&lt;/span&gt;   &lt;span class=&quot;nv&quot;&gt;$p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;amp;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
   &lt;span class=&quot;nv&quot;&gt;$m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;memory_get_usage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
   &lt;span class=&quot;nv&quot;&gt;$s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//设置$s为null
&lt;/span&gt;   &lt;span class=&quot;nv&quot;&gt;$mm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;memory_get_usage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'&amp;lt;br /&amp;gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$mm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
   &lt;span class=&quot;cp&quot;&gt;?&amp;gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;现在刷新页面，我们看到，输出$p已经是没有内容了，unset()前后内存占用量之差是272，即已经清除了变量占用的内存。本例中的$s=null也 可以换成unset()，如下：&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
   &lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
   &lt;span class=&quot;nv&quot;&gt;$s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;str_repeat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'1'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;256&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//这和第二个例子完全相同
&lt;/span&gt;   &lt;span class=&quot;nv&quot;&gt;$p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;amp;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
   &lt;span class=&quot;nv&quot;&gt;$m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;memory_get_usage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
   &lt;span class=&quot;nb&quot;&gt;unset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//销毁$s
&lt;/span&gt;   &lt;span class=&quot;nb&quot;&gt;unset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
   &lt;span class=&quot;nv&quot;&gt;$mm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;memory_get_usage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'&amp;lt;br /&amp;gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$mm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
   &lt;span class=&quot;cp&quot;&gt;?&amp;gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;我们将$s和$p都使用unset()销毁，这时再看内存占用量之差也是272，说明这样也可以释放内存。那么，我们可以得到另外一条结论：
   结论二、只有当指向该变量的所有变量（如引用变量）都被销毁后，才会释放内存。&lt;/p&gt;

</description>
        <pubDate>Tue, 05 Jul 2016 00:00:00 +0800</pubDate>
        <link>http://www.onwise.xyz/2016/07/05/PHP-%E5%86%85%E5%AD%98%E6%BA%A2%E5%87%BA/</link>
        <guid isPermaLink="true">http://www.onwise.xyz/2016/07/05/PHP-%E5%86%85%E5%AD%98%E6%BA%A2%E5%87%BA/</guid>
        
        <category>PHP</category>
        
        
      </item>
    
  </channel>
</rss>
